---
+++
@@ -23,7 +23,9 @@


 async def foo_yield_2():
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Statement("function definition", lineno-1)
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Statement("yield", lineno-1)
     await foo()

@@ -31,22 +33,29 @@
 async def foo_yield_3():  # error: 0, "exit", Statement("yield", lineno+2)
     await foo()
     yield
+    await trio.lowlevel.checkpoint()


 async def foo_yield_4():  # error: 0, "exit", Statement("yield", lineno+3)
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Statement("function definition", lineno-1)
+    await trio.lowlevel.checkpoint()
     await (yield)  # error: 11, "yield", Statement("yield", lineno-1)
     yield  # safe
+    await trio.lowlevel.checkpoint()


 async def foo_yield_return_1():
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Statement("function definition", lineno-1)
+    await trio.lowlevel.checkpoint()
     return  # error: 4, "return", Statement("yield", lineno-1)


 async def foo_yield_return_2():
     await foo()
     yield
+    await trio.lowlevel.checkpoint()
     return  # error: 4, "return", Statement("yield", lineno-1)


@@ -68,6 +77,7 @@
 async def foo_async_with_2():
     # with'd expression evaluated before checkpoint
     async with (yield):  # error: 16, "yield", Statement("function definition", lineno-2)
+        await trio.lowlevel.checkpoint()
         yield
 # fmt: on

@@ -75,6 +85,7 @@
 async def foo_async_with_3():
     async with trio.fail_after(5):
         yield
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Statement("yield", lineno-1)


@@ -83,9 +94,11 @@
     async for i in (
         yield  # error: 8, "yield", Statement("function definition", lineno-2)
     ):
+        await trio.lowlevel.checkpoint()
         yield  # safe
     else:
         yield  # safe
+    await trio.lowlevel.checkpoint()


 # await anext(iter) is not called on break
@@ -94,6 +107,7 @@
         yield
         if ...:
             break
+    await trio.lowlevel.checkpoint()


 async def foo_async_for_3():  # safe
@@ -111,13 +125,16 @@
 async def foo_for():  # error: 0, "exit", Statement("yield", lineno+3)
     await foo()
     for i in "":
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Statement("yield", lineno)
+    await trio.lowlevel.checkpoint()


 async def foo_for_1():  # error: 0, "exit", Statement("function definition", lineno) # error: 0, "exit", Statement("yield", lineno+3)
     for _ in "":
         await foo()
         yield
+    await trio.lowlevel.checkpoint()


 # while
@@ -130,13 +147,16 @@
     else:
         await foo()  # will always run
     yield  # safe
+    await trio.lowlevel.checkpoint()


 # simple yield-in-loop case
 async def foo_while_2():  # error: 0, "exit", Statement("yield", lineno+3)
     await foo()
     while foo():
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Statement("yield", lineno)
+    await trio.lowlevel.checkpoint()


 # no checkpoint after yield if else is entered
@@ -145,39 +165,52 @@
         await foo()
         yield
     else:
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Statement("yield", lineno-2) # error: 8, "yield", Statement("function definition", lineno-5)
+    await trio.lowlevel.checkpoint()


 # check that errors are suppressed in visit_While
 async def foo_while_4():  # error: 0, "exit", Statement("yield", lineno+3) # error: 0, "exit", Statement("yield", lineno+5) # error: 0, "exit", Statement("yield", lineno+7)
     await foo()
     while foo():
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Statement("yield", lineno) # error: 8, "yield", Statement("yield", lineno+2) # error: 8, "yield", Statement("yield", lineno+4)
         while foo():
+            await trio.lowlevel.checkpoint()
             yield  # error: 12, "yield", Statement("yield", lineno)# error: 12, "yield", Statement("yield", lineno-2)# error: 12, "yield", Statement("yield", lineno+2)
             while foo():
+                await trio.lowlevel.checkpoint()
                 yield  # error: 16, "yield", Statement("yield", lineno-2)# error: 16, "yield", Statement("yield", lineno)
+    await trio.lowlevel.checkpoint()


 # check that state management is handled in for loops as well
 async def foo_while_4_for():  # error: 0, "exit", Statement("yield", lineno+3) # error: 0, "exit", Statement("yield", lineno+5) # error: 0, "exit", Statement("yield", lineno+7)
     await foo()
     for i in bar():
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Statement("yield", lineno) # error: 8, "yield", Statement("yield", lineno+2) # error: 8, "yield", Statement("yield", lineno+4)
         for i in bar():
+            await trio.lowlevel.checkpoint()
             yield  # error: 12, "yield", Statement("yield", lineno)# error: 12, "yield", Statement("yield", lineno-2)# error: 12, "yield", Statement("yield", lineno+2)
             for i in bar():
+                await trio.lowlevel.checkpoint()
                 yield  # error: 16, "yield", Statement("yield", lineno-2)# error: 16, "yield", Statement("yield", lineno)
+    await trio.lowlevel.checkpoint()


 # check error suppression is reset
 async def foo_while_5():
     await foo()
     while foo():
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Statement("yield", lineno)

         async def foo_nested_error():  # error: 8, "exit", Statement("yield", lineno+1)
+            await trio.lowlevel.checkpoint()
             yield  # error: 12, "yield", Statement("function definition", lineno-1)
+            await trio.lowlevel.checkpoint()

     await foo()

@@ -187,16 +220,19 @@
 async def foo_while_continue_1():  # error: 0, "exit", Statement("yield", lineno+3)
     await foo()
     while foo():
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Statement("yield", lineno)
         if ...:
             continue
         await foo()
+    await trio.lowlevel.checkpoint()


 # multiple continues
 async def foo_while_continue_2():  # error: 0, "exit", Statement("yield", lineno+3)
     await foo()
     while foo():
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Statement("yield", lineno)
         if foo():
             continue
@@ -206,6 +242,7 @@
         while foo():
             yield  # safe
             await foo()
+    await trio.lowlevel.checkpoint()


 # --- while + break ---
@@ -216,7 +253,9 @@
             break
     else:
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Statement("function definition", lineno-6)
+    await trio.lowlevel.checkpoint()


 # no checkpoint on break
@@ -227,6 +266,7 @@
         if ...:
             break
         await foo()
+    await trio.lowlevel.checkpoint()


 # guaranteed if else and break
@@ -238,6 +278,7 @@
     else:
         await foo()  # runs if 0-iter
     yield  # safe
+    await trio.lowlevel.checkpoint()


 # break at non-guaranteed checkpoint
@@ -248,7 +289,9 @@
         await foo()  # might not run
     else:
         await foo()  # might not run
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Statement("function definition", lineno-7)
+    await trio.lowlevel.checkpoint()


 # check break is reset on nested
@@ -264,7 +307,9 @@
             await foo()
         yield  # safe
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Statement("yield", lineno-9)
+    await trio.lowlevel.checkpoint()


 # check multiple breaks
@@ -279,7 +324,9 @@
         await foo()
         if ...:
             break
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Statement("yield", lineno-8)
+    await trio.lowlevel.checkpoint()


 async def foo_while_break_7():  # error: 0, "exit", Statement("function definition", lineno)# error: 0, "exit", Statement("yield", lineno+5)
@@ -289,6 +336,7 @@
             break
         yield
         break
+    await trio.lowlevel.checkpoint()


 async def foo_while_endless_1():
@@ -301,6 +349,7 @@
     while foo():
         await foo()
         yield
+    await trio.lowlevel.checkpoint()


 async def foo_while_endless_3():
@@ -322,9 +371,11 @@
 # try
 async def foo_try_1():  # error: 0, "exit", Statement("function definition", lineno) # error: 0, "exit", Statement("yield", lineno+2)
     try:
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Statement("function definition", lineno-2)
     except:
         pass
+    await trio.lowlevel.checkpoint()


 # no checkpoint after yield in ValueError
@@ -332,12 +383,14 @@
     try:
         await foo()
     except ValueError:
+        await trio.lowlevel.checkpoint()
         # try might not have checkpointed
         yield  # error: 8, "yield", Statement("function definition", lineno-5)
     except:
         await foo()
     else:
         pass
+    await trio.lowlevel.checkpoint()


 async def foo_try_3():  # error: 0, "exit", Statement("yield", lineno+6)
@@ -346,13 +399,16 @@
     except:
         await foo()
     else:
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Statement("function definition", lineno-6)
+    await trio.lowlevel.checkpoint()


 async def foo_try_4():  # safe
     try:
         ...
     except:
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Statement("function definition", lineno-4)
     finally:
         await foo()
@@ -362,6 +418,7 @@
     try:
         await foo()
     finally:
+        await trio.lowlevel.checkpoint()
         # try might crash before checkpoint
         yield  # error: 8, "yield", Statement("function definition", lineno-5)
         await foo()
@@ -372,7 +429,9 @@
         await foo()
     except ValueError:
         pass
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Statement("function definition", lineno-5)
+    await trio.lowlevel.checkpoint()


 async def foo_try_7():  # error: 0, "exit", Statement("yield", lineno+17)
@@ -385,6 +444,7 @@
         yield
         await foo()
     except SyntaxError:
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Statement("yield", lineno-7)
         await foo()
     finally:
@@ -393,6 +453,7 @@
     # by any of the excepts, jumping straight to the finally.
     # Then the error will be propagated upwards
     yield  # safe
+    await trio.lowlevel.checkpoint()


 ## safe only if (try or else) and all except bodies either await or raise
@@ -408,6 +469,7 @@
         raise
     else:
         await foo()
+    await trio.lowlevel.checkpoint()


 # no checkpoint after yield in else
@@ -418,6 +480,7 @@
         await foo()
     else:
         yield
+    await trio.lowlevel.checkpoint()


 # bare except means we'll jump to finally after full execution of either try or the except
@@ -448,6 +511,7 @@
     except ValueError:
         await foo()
     finally:
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Statement("function definition", lineno-6)
         await foo()

@@ -456,6 +520,7 @@
     try:
         await foo()
     finally:
+        await trio.lowlevel.checkpoint()
         # try might crash before checkpoint
         yield  # error: 8, "yield", Statement("function definition", lineno-5)
         await foo()
@@ -464,9 +529,11 @@
 # if
 async def foo_if_1():
     if ...:
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Statement("function definition", lineno-2)
         await foo()
     else:
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Statement("function definition", lineno-5)
         await foo()

@@ -477,7 +544,9 @@
         ...
     else:
         yield
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Statement("yield", lineno-1)
+    await trio.lowlevel.checkpoint()


 async def foo_if_3():  # error: 0, "exit", Statement("yield", lineno+6)
@@ -486,7 +555,9 @@
         yield
     else:
         ...
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Statement("yield", lineno-3)
+    await trio.lowlevel.checkpoint()


 async def foo_if_4():  # error: 0, "exit", Statement("yield", lineno+7)
@@ -496,7 +567,9 @@
         await foo()
     else:
         ...
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Statement("yield", lineno-5)
+    await trio.lowlevel.checkpoint()


 async def foo_if_5():  # error: 0, "exit", Statement("yield", lineno+8)
@@ -507,7 +580,9 @@
     else:
         yield
         ...
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Statement("yield", lineno-2)
+    await trio.lowlevel.checkpoint()


 async def foo_if_6():  # error: 0, "exit", Statement("yield", lineno+8)
@@ -518,7 +593,9 @@
         yield
         await foo()
         ...
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Statement("yield", lineno-5)
+    await trio.lowlevel.checkpoint()


 async def foo_if_7():  # error: 0, "exit", Statement("function definition", lineno)
@@ -526,6 +603,7 @@
         await foo()
         yield
         await foo()
+    await trio.lowlevel.checkpoint()


 async def foo_if_8():  # error: 0, "exit", Statement("function definition", lineno)
@@ -535,21 +613,25 @@
         await foo()
         yield
         await foo()
+    await trio.lowlevel.checkpoint()


 # IfExp
 async def foo_ifexp_1():  # error: 0, "exit", Statement("yield", lineno+1) # error: 0, "exit", Statement("yield", lineno+1)
     print((yield) if await foo() else (yield))
+    await trio.lowlevel.checkpoint()


 # Will either enter else, and it's a guaranteed checkpoint - or enter if, in which
 # case the problem is the yield.
 async def foo_ifexp_2():  # error: 0, "exit", Statement("yield", lineno+2)
+    await trio.lowlevel.checkpoint()
     print(
         (yield)  # error: 9, "yield", Statement("function definition", lineno-2)
         if ... and await foo()
         else await foo()
     )
+    await trio.lowlevel.checkpoint()


 # normal function
@@ -594,7 +676,9 @@
     await foo()

     async def foo_func_2():  # error: 4, "exit", Statement("yield", lineno+1)
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Statement("function definition", lineno-1)
+        await trio.lowlevel.checkpoint()


 # autofix doesn't insert newline after nested function def and before checkpoint
@@ -606,6 +690,7 @@

     async def foo_func_4():
         await foo()
+    await trio.lowlevel.checkpoint()


 async def foo_func_5():  # error: 0, "exit", Statement("yield", lineno+2)
@@ -618,16 +703,19 @@
         async def foo_func_7():
             await foo()
             ...
+    await trio.lowlevel.checkpoint()
 # fmt: on


 # No error from function definition, but may shortcut after yield
 async def foo_boolops_1():  # error: 0, "exit", Stmt("yield", line+1)
     _ = await foo() and (yield) and await foo()
+    await trio.lowlevel.checkpoint()


 # may shortcut after any of the yields
 async def foo_boolops_2():  # error: 0, "exit", Stmt("yield", line+4) # error: 0, "exit", Stmt("yield", line+6)
+    await trio.lowlevel.checkpoint()
     # known false positive - but chained yields in bool should be rare
     _ = (
         await foo()
@@ -635,16 +723,19 @@
         and await foo()
         and (yield)  # error: 13, "yield", Stmt("yield", line-2, 13)
     )
+    await trio.lowlevel.checkpoint()


 # fmt: off
 async def foo_boolops_3():  # error: 0, "exit", Stmt("yield", line+1) # error: 0, "exit", Stmt("yield", line+4) # error: 0, "exit", Stmt("yield", line+5)
+    await trio.lowlevel.checkpoint()
     _ = (await foo() or (yield) or await foo()) or (
         ...
         or (
             (yield)  # error: 13, "yield", Stmt("yield", line-3)
             and (yield))  # error: 17, "yield", Stmt("yield", line-1)
     )
+    await trio.lowlevel.checkpoint()
 # fmt: on


@@ -672,6 +763,7 @@
         if ...:
             continue
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-7)

     # continue/else
@@ -680,6 +772,7 @@
             continue
         await foo()
     else:
+        await trio.lowlevel.checkpoint()
         yield  # error: 8, "yield", Stmt("yield", line-8)
     await foo()
     yield
@@ -724,6 +817,7 @@

     for _ in ():
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     for _ in {1: 2, 3: 4}:
@@ -732,14 +826,17 @@

     for _ in "   ".strip():
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     for _ in range(0):
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     for _ in (*range(0),):
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     for _ in (*(1, 2),):
@@ -748,10 +845,12 @@

     for _ in {**{}}:
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     for _ in {**{}, **{}}:
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     for _ in {**{1: 2}}:
@@ -777,31 +876,38 @@

     for _ in {}:
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     for _ in "":
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     for _ in """""":
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     for _ in [[], []][0]:
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     for _ in [[], []].__getitem__(0):
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     # not handled
     for _ in list((1, 2)):
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-5)

     for _ in list():
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     # while
@@ -815,6 +921,7 @@
         if ...:
             break
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-6)

     while True:
@@ -827,6 +934,7 @@

     while False:
         await foo()  # type: ignore[unreachable]
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     while "hello":
@@ -836,11 +944,13 @@
     # false positive on containers
     while [1, 2]:
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-5)

     # will get caught by any number of linters, but trio911 will also complain
     for _ in 5:  # type: ignore
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-5)

     # range with constant arguments also handled, see more extensive tests in 910
@@ -858,10 +968,12 @@

     for i in range(1 + 1):  # not handled
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     for i in range(None):  # type: ignore
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     for i in range(+3):
@@ -870,6 +982,7 @@

     for i in range(-3.5):  # type: ignore
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     # duplicated from 910 to have all range tests in one place
@@ -893,20 +1006,24 @@

     for i in range(10, 5):
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     # binary operations are not handled
     for i in range(3 - 2):
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-5)

     for i in range(10**3):
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     # nor nested unary operations
     for i in range(--3):
         await foo()
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-5)

     await foo()
@@ -930,6 +1047,7 @@

     # guaranteed iteration and await in value, but test is not guaranteed
     [await foo() for x in range(10) if bar()]
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     # guaranteed iteration and await in value
@@ -938,6 +1056,7 @@

     # not guaranteed to iter
     [await foo() for x in bar()]
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     # await statement in loop expression
@@ -949,10 +1068,12 @@
     yield  # safe

     {await foo() for x in bar()}
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-3)

     # dict comprehensions use same logic as list
     {await foo(): 5 for x in bar()}
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     # other than `await` can be in both key&val
@@ -964,9 +1085,11 @@

     # generator expressions are never treated as safe
     (await foo() for x in range(10))
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     (await foo() for x in bar() if await foo())
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-3)

     # async for always safe
@@ -979,27 +1102,33 @@

     # other than in generator expression
     (... async for x in bar())
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-4)

     # multiple loops
     [... for x in range(10) for y in range(10) if await foo()]
     yield
     [... for x in range(10) for y in bar() if await foo()]
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-2)
     [... for x in bar() for y in range(10) if await foo()]
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-2)

     [await foo() for x in range(10) for y in range(10)]
     yield
     [await foo() for x in range(10) for y in bar()]
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-2)
     [await foo() for x in bar() for y in range(10)]
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-2)

     # trip loops!
     [... for x in range(10) for y in range(10) async for z in bar()]
     yield
     [... for x in range(10) for y in range(10) for z in range(10)]
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-2)

     # multiple ifs
@@ -1007,6 +1136,7 @@
     yield

     [... for x in range(10) for y in bar() if await foo() if await foo()]
+    await trio.lowlevel.checkpoint()
     yield  # error: 4, "yield", Stmt("yield", line-3)

     # nested comprehensions
