"""
This type stub file was generated by pyright.
Removed, __all__, StyleGuide and StyleGuideManager to not need to import
(and therefore generate stub for) flake8.statistics
"""

import argparse
import enum

"""Implementation of the StyleGuide used by Flake8."""

LOG = ...

class Selected(enum.Enum):
    """Enum representing an explicitly or implicitly selected code."""

    Explicitly = ...
    Implicitly = ...

class Ignored(enum.Enum):
    """Enum representing an explicitly or implicitly ignored code."""

    Explicitly = ...
    Implicitly = ...

class Decision(enum.Enum):
    """Enum representing whether a code should be ignored or selected."""

    Ignored = ...
    Selected = ...

class DecisionEngine:
    """A class for managing the decision process around violations.

    This contains the logic for whether a violation should be reported or
    ignored.
    """

    def __init__(self, options: argparse.Namespace) -> None:
        """Initialize the engine."""
        ...
    def was_selected(self, code: str) -> Selected | Ignored:
        """Determine if the code has been selected by the user.

        :param code: The code for the check that has been run.
        :returns:
            Selected.Implicitly if the selected list is empty,
            Selected.Explicitly if the selected list is not empty and a match
            was found,
            Ignored.Implicitly if the selected list is not empty but no match
            was found.
        """
        ...
    def was_ignored(self, code: str) -> Selected | Ignored:
        """Determine if the code has been ignored by the user.

        :param code:
            The code for the check that has been run.
        :returns:
            Selected.Implicitly if the ignored list is empty,
            Ignored.Explicitly if the ignored list is not empty and a match was
            found,
            Selected.Implicitly if the ignored list is not empty but no match
            was found.
        """
        ...
    def make_decision(self, code: str) -> Decision:
        """Decide if code should be ignored or selected."""
        ...
    def decision_for(self, code: str) -> Decision:
        """Return the decision for a specific code.

        This method caches the decisions for codes to avoid retracing the same
        logic over and over again. We only care about the select and ignore
        rules as specified by the user in their configuration files and
        command-line flags.

        This method does not look at whether the specific line is being
        ignored in the file itself.

        :param code: The code for the check that has been run.
        """
        ...
